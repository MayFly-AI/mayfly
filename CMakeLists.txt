cmake_minimum_required(VERSION 3.10)
project(picam)
message("Host system: ${CMAKE_HOST_SYSTEM_NAME}")
message("Compiler   : ${CMAKE_CXX_COMPILER_ID}")

find_program(CCACHE_PROGRAM ccache)
IF(CCACHE_PROGRAM)
	message("CCache enabled")
	set(CMAKE_CXX_COMPILER_LAUNCHER ccache)
ENDIF()
IF(EXISTS "${CMAKE_SOURCE_DIR}/CMakeListsUser.txt")
	INCLUDE("${CMAKE_SOURCE_DIR}/CMakeListsUser.txt")
ENDIF()

#set(CMAKE_DEBUG_POSTFIX d)
set(CMAKE_VERBOSE_MAKEFILE TRUE)

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
if (NOT CMAKE_LIBRARY_OUTPUT_DIRECTORY)
	set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
endif()
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_CXX_STANDARD 17)
SET(USE_ASM 1)

message(STATUS "build system processor ${CMAKE_SYSTEM_PROCESSOR}")

if(CMAKE_SYSTEM_PROCESSOR MATCHES AMD64)
	message(STATUS "AVX2 available")
	SET(AVX2 1)
elseif(CMAKE_SYSTEM_PROCESSOR MATCHES armv7l)		#match on raspberry pi
	SET(ARM 1)
endif()

if(ENABLE_AVDECODE)
	add_definitions(-DAVDECODE=1)
	set(AVLIBS avcodec avutil swresample swscale avformat)
endif()

if(MSVC)
	SET(CMAKE_CXX_FLAGS "/nologo /DWIN32=1 /D_WINDOWS /W3 /GR /EHsc /MP /arch:AVX2 /GF /guard:cf- /wd4996 /wd4068 /wd5033 /w14388 /w14389 /w14101 /w14189 /std:c++17 /GS- /Gw /Qspectre- /fp:fast")
	SET(CMAKE_CXX_FLAGS_DEBUG "/D_DEBUG /MTd /ZI /Ob0 /Od /RTC1 /Gy")
	SET(CMAKE_CXX_FLAGS_RELEASE "/MTd /ZI /Ob0 /O2 /Gy")
	SET(CMAKE_C_FLAGS "/nologo /DWIN32=1 /D_WINDOWS /W3 /MP /arch:AVX2 /GF /guard:cf- /wd4996 /wd4068 /Qspectre-")
	SET(CMAKE_C_FLAGS_DEBUG "/D_DEBUG /MTd /ZI /Ob0 /Od /RTC1 /Gy")
	SET(CMAKE_C_FLAGS_RELEASE "/MTd /ZI /Ob0 /Od /RTC1 /Gy")
	add_compile_options("/MP")
endif()

if(UNIX)
	add_definitions(-DUNIX)

	# Assuming Clang or GCC
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -Wno-unused-function -Wno-unused-parameter -Wno-ignored-qualifiers -Wno-implicit-fallthrough -fvisibility=hidden -pipe")
	#set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fsanitize=address -fPIC -fno-omit-frame-pointer")
	if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
		# using GCC
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-psabi -Wno-deprecated-copy")
	endif()

	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-missing-field-initializers -Wno-address-of-packed-member")

	find_package(Threads REQUIRED)
	link_libraries(${CMAKE_THREAD_LIBS_INIT})

	include(CheckIncludeFile)
	check_include_file(/usr/include/bcm_host.h BCMHOST)
	if(BCMHOST)
		message("On Raspberry Pi")
		set(PLATFORM_RPI 1)
		add_definitions(-DPLATFORM_RPI=1)
	else()
		message("Not on Raspberry Pi")
	endif()
endif()

if(CMAKE_GENERATOR MATCHES "Ninja")		#hack to determine if WSL build
	add_definitions(-DWSL)
endif()

add_definitions(-DCMAKE_SOURCE_DIR="${CMAKE_SOURCE_DIR}")

# For pybind11
find_package(Python3 COMPONENTS Interpreter Development QUIET)

find_package(CUDA)
if(CUDA_FOUND)
	SET(CUDA_HOST_COMPILER ${CMAKE_CXX_COMPILER})
	SET(CUDA_NVCC_FLAGS ${CUDA_NVCC_FLAGS};-gencode arch=compute_50,code=\"sm_50,compute_50\")
	SET(CUDA_NVCC_FLAGS "${CUDA_NVCC_FLAGS} -std=c++17")
	add_definitions(-DCUDA)
	if(WIN32)
		Set(CUVID_LIB ${CMAKE_SOURCE_DIR}/3rdparty/nv_video_codec/Lib/x64/nvcuvid.lib)
		set(NVENCODEAPI_LIB ${CMAKE_SOURCE_DIR}/3rdparty/nv_video_codec/Lib/x64/nvencodeapi.lib)
	else()
		find_library(CUVID_LIB nvcuvid)
		find_library(NVENCODEAPI_LIB nvidia-encode)
	endif()
	message(STATUS "Cuda found ${CUDA_INCLUDE_DIRS} ${CUDA_LIBRARIES} end")
else()
	message(STATUS "Cuda not found")
endif()

if(UNIX AND NOT APPLE)
	find_package(PkgConfig)
	pkg_check_modules(LIBGPIOD libgpiod)
if(LIBGPIOD_FOUND)
	add_definitions(-DENABLE_LIBGPIOD=1)
endif()
endif()

add_subdirectory(shared)
add_subdirectory(platform)
add_subdirectory(memory)
add_subdirectory(video)
add_subdirectory(camera)
add_subdirectory(tof)
add_subdirectory(pcap)
add_subdirectory(magnetometer)
add_subdirectory(imu)
add_subdirectory(core)
add_subdirectory(mayfly)
add_subdirectory(viewer)
add_subdirectory(3rdparty)
add_subdirectory(bindings)
add_subdirectory(packaging)
add_subdirectory(posesensor)

if(PLATFORM_RPI)
	add_subdirectory(uwb)
endif()
